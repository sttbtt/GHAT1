# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
#
# def delete_temp_keychain(name)
#   delete_keychain(
#     name: name
#   ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
# end
#
# def create_temp_keychain(name, password)
#   create_keychain(
#     name: name,
#     password: password,
#     unlock: false,
#     timeout: 0
#   )
# end
#
# def ensure_temp_keychain(name, password)
#   delete_temp_keychain(name)
#   create_temp_keychain(name, password)
# end

platform :ios do

# THIS LANE UPLOADS TO TESTFLIGHT LOCALLY
  desc "Push a new beta build to TestFlight Locally"
  lane :beta do
    xcversion(version: "14.3")
    match(
      type: "appstore", readonly: true,
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
    )
    increment_build_number(xcodeproj: "GHAT1.xcodeproj")
    build_app(scheme: "GHAT1")
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

# THESE LANES UPLOADS TO TESTFLIGHT WITH GITHUB ACTIONS

#   desc "Build and upload to TestFlight"
#   lane :build_upload_testflight do
#     match(
#       type: "appstore", readonly: true,
#       git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"])
#     )
#     load_asc_api_key
#     prepare_signing
#     increment_build_number(xcodeproj: "GHAT1.xcodeproj")
#     build_app(scheme: "GHAT1")
#     upload_to_testflight(skip_waiting_for_build_processing: true)
#    end
#
#   desc "Load ASC API Key information to use in subsequent lanes"
#   lane :load_asc_api_key do
#     app_store_connect_api_key(
#       key_id: ENV["ASC_KEY_ID"],
#       issuer_id: ENV["ASC_ISSUER_ID"],
#       key_content: ENV["ASC_KEY"],
#       is_key_content_base64: true,
#       in_house: false # detecting this via ASC private key not currently supported
#     )
#   end
#
#   desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
#    lane :prepare_signing do |options|
#      team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
#      api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
#
#      keychain_name = "signing"
#      keychain_password = "temp"
#
#      delete_keychain(
#        name: keychain_name
#      ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")
#
#      create_keychain(
#        name: keychain_name,
#        password: keychain_password,
#        default_keychain: true,
#        unlock: true,
#        timeout: 3600
#      )
#
#      import_certificate(
#        certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
#        certificate_password: ENV["SIGNING_KEY_PASSWORD"],
#        keychain_name: keychain_name,
#        keychain_password: keychain_password
#      )
#
#      # fetches and installs provisioning profiles from ASC
#      sigh(
#        adhoc: options[:adhoc],
#        api_key: api_key,
#        readonly: true
#      )
#    end
#
#   desc "Push a new beta build to TestFlight with Github Actions"
#   lane :beta do
#     setup_ci if ENV['CI']
#     match(type: "appstore")
#     build_app
#     upload_to_testflight(skip_waiting_for_build_processing: true)
#   end
#
# EXTRA UTILS
  desc "Installs certificate type on system"
  lane :sync_all_development do
    match(type: "development")
  end

  desc "Refresh certificates"
  lane :certificates do
    match(app_identifier: ["dev.scottbennett.GHAT1"])
  end
end
